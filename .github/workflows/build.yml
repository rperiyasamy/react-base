name: test

on:
  schedule:
    - cron: '40 5 * * *'
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment'
        required: true
        default: 'dev'
        options:
          - dev
          - qa
      
      awsutil:
        type: boolean
        description: "AWS Util Layer"
        required: false
      log:
        type: boolean
        description: "Log Layer"
        required: false
      webclient:
        type: boolean
        description: "Web Client Layer"
        required: false

jobs:
  # prepare:
  #   uses: ./.github/workflows/set-matrix.yml
  #   with:
  #     environment: ${{ github.event.inputs.environment }}

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Check selected options
        run: |
          echo "AWS Util: ${{ github.event.inputs.awsutil }}"
          echo "Log: ${{ github.event.inputs.log }}"
          echo "Web client: ${{ github.event.inputs.webclient }}"
          
      - name: Collect selected layers into an array
        id: collect_layers
        run: |
          layers=()
      
          if [ "${{ github.event.inputs.awsutil }}" == "true" ]; then
            layers+=("awsutil")
          fi
          if [ "${{ github.event.inputs.log }}" == "true" ]; then
            layers+=("log")
          fi
          if [ "${{ github.event.inputs.webclient }}" == "true" ]; then
            layers+=("webclient")
          fi
      
          echo "Selected layers: ${layers[@]}"
      
          # Export as comma-separated string
          echo "layers_csv=$(IFS=','; echo "${layers[*]}")" >> "$GITHUB_OUTPUT"

      - name: Loop over selected layers
        run: |
          IFS=',' read -ra LAYERS <<< "${{ steps.collect_layers.outputs.layers_csv }}"
          for layer in "${LAYERS[@]}"; do
            echo "Selected layer: $layer"
          done



  # wireguard_example:
  #   runs-on: ubuntu-latest
  #   steps:
  #     # - run: sudo apt-get update && sudo apt-get install -y mysql-client
      
  #     - run: sudo apt install wireguard

  #     - run: echo "${{ secrets.WIREGUARD_PRIVATE_KEY }}" > privatekey

  #     - run: sudo ip link add dev wg0 type wireguard

  #     - run: sudo ip address add dev wg0 192.168.2.2 peer 192.168.2.1

  #     - run: sudo wg set wg0 listen-port 48123 private-key privatekey peer zMTflc85ypiteIyq+sDpCNej0DR6WgrlAVN7zCMqZUQ= allowed-ips 0.0.0.0/0 endpoint 13.59.139.144:43772

  #     - run: sudo ip link set up dev wg0

  #     - run: sudo ip route add 172.31.0.0/16 via 192.168.2.1

  #     - run: sudo wg show

  #     - name: Check routing table
  #       run: |
  #         ip route show

  #     # - name: Add routes
  #     #   run: |
  #     #     sudo ip route add 172.31.64.0/20 via 192.168.2.1
  #     #     sudo ip route add 172.31.80.0/20 via 192.168.2.1


  #     - run: sudo iptables -L
          
  #     # - run: curl -vvv http://192.168.2.1

  #     - run: mysql -h database-1.cgtultbvny9h.us-east-2.rds.amazonaws.com -u admin -p'AwP680O6Ojwo' -e "SELECT 1;"

  # setup-vpn:
  #   uses: ./.github/workflows/wireguard.yml
  #   with:
  #     ec2_public_ip: "13.59.139.144"
  #     ec2_wg_public_key: "zMTflc85ypiteIyq+sDpCNej0DR6WgrlAVN7zCMqZUQ="
  #   secrets:
  #     wireguard_private_key: ${{ secrets.WIREGUARD_PRIVATE_KEY }}

  # post-setup:
  #   needs: setup-vpn
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Test MySQL connection over VPN
  #       run: |
  #         sudo apt-get update && sudo apt-get install -y mysql-client
  #         mysql -h database-1.cgtultbvny9h.us-east-2.rds.amazonaws.com -u admin -p'AwP680O6Ojwo' -e "SELECT 1;"


      # - name: connect to dbsudo apt install mysql-client-core-8.0
      #   run: |
      #     DB_HOST="database-1.cgtultbvny9h.us-east-2.rds.amazonaws.com"
      #     DB_USER="admin"
      #     DB_PASS="AwP680O6Ojwo"
      #     DB_NAME="mydb"

      #     # mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME"
      #     timeout 60s mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME" -e "SELECT 1;" &> /dev/null

      #     # Check exit status
      #     if [ $? -eq 0 ]; then
      #       echo "✅ Connected to MySQL database successfully."
      #     else
      #       echo "❌ Failed to connect to MySQL database."
      #     fi

  # deploy:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
  #   steps:
  #     - name: Deploy to ${{ matrix.env }}
  #       run: | 
  #         echo "Deploying to ${{ matrix.env }} with image ${{ matrix.image }}"
  #         echo "Build: ${{matrix.build}}"
      
  # a:
  #   name: a
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "A"
  #     - id: set
  #       run: |
  #         echo "::set-output name=run_job_b::yes"
  #   outputs:
  #     run_job_b: ${{ steps.set.outputs.run_job_b }}  
  # # sonar:
  # #   uses: rperiyasamy/circleci-demo/.github/workflows/sample.yaml@main
  # #   with:
  # #     environment: 'dev'
  # #   env:
  # #     GITHUB_TOKEN: ${{ secrets.PAT }}
  # b:
  #   name: b
  #   runs-on: ubuntu-latest
  #   needs:
  #     - a
  #   if: needs.a.outputs.run_job_b == 'yes'
  #   steps:
  #     - run: |
  #         echo "B"  
  #         # exit 1
  # c:
  #   name: c
  #   runs-on: ubuntu-latest
  #   needs:
  #     - a
  #     - b
  #   if: always() && (needs.b.result == 'success' || needs.b.result == 'skipped')
  #   steps:
  #     - run: echo "C1"
