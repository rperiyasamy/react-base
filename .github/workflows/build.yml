name: test

on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment'
        required: true
        default: 'dev'
        options:
          - dev
          - qa

jobs:
  # prepare:
  #   uses: ./.github/workflows/set-matrix.yml
  #   with:
  #     environment: ${{ github.event.inputs.environment }}

  wireguard_example:
    runs-on: ubuntu-latest
    steps:
      - run: sudo apt install wireguard

      - run: echo "${{ secrets.WIREGUARD_PRIVATE_KEY }}" > privatekey

      - run: sudo ip link add dev wg0 type wireguard

      - run: sudo ip address add dev wg0 192.168.2.2 peer 192.168.2.1

      - run: sudo wg set wg0 listen-port 48123 private-key privatekey peer Vsdg1g5YmLP/cRiMZw5y063UFN6/dt/Z4LnBv9SO0x0= allowed-ips 0.0.0.0/0 endpoint 13.59.149.179:43772

      - run: sudo ip link set up dev wg0

      - run: sudo wg show

      - run: curl -vvv http://192.168.2.1

      - name: connect to db
        run: |
          DB_HOST="database-1.cgtultbvny9h.us-east-2.rds.amazonaws.com"
          DB_USER="admin"
          DB_PASS="AwP680O6Ojwo"
          DB_NAME="your-database-name"

          mysql -h "$DB_HOST" -u "$DB_USER" -p"$DB_PASS" "$DB_NAME"

  # deploy:
  #   needs: prepare
  #   runs-on: ubuntu-latest
  #   strategy:
  #     matrix: ${{ fromJson(needs.prepare.outputs.matrix) }}
  #   steps:
  #     - name: Deploy to ${{ matrix.env }}
  #       run: | 
  #         echo "Deploying to ${{ matrix.env }} with image ${{ matrix.image }}"
  #         echo "Build: ${{matrix.build}}"
      
  # a:
  #   name: a
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: echo "A"
  #     - id: set
  #       run: |
  #         echo "::set-output name=run_job_b::yes"
  #   outputs:
  #     run_job_b: ${{ steps.set.outputs.run_job_b }}  
  # # sonar:
  # #   uses: rperiyasamy/circleci-demo/.github/workflows/sample.yaml@main
  # #   with:
  # #     environment: 'dev'
  # #   env:
  # #     GITHUB_TOKEN: ${{ secrets.PAT }}
  # b:
  #   name: b
  #   runs-on: ubuntu-latest
  #   needs:
  #     - a
  #   if: needs.a.outputs.run_job_b == 'yes'
  #   steps:
  #     - run: |
  #         echo "B"  
  #         # exit 1
  # c:
  #   name: c
  #   runs-on: ubuntu-latest
  #   needs:
  #     - a
  #     - b
  #   if: always() && (needs.b.result == 'success' || needs.b.result == 'skipped')
  #   steps:
  #     - run: echo "C1"
